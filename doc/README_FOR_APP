=VisualReST

===Introduction
VisualReST is a new way of sharing content across the internet. User of the VisualRest system willing to share
content to others runs a client program on his device (a mobile phone, 
home computer, internet tablet etc.). The client program connects to the central server of VisualReST and
all content (images, videos, files etc.) meant to be shared will be accessible to other users of
VisualReST.

The central server of the system provides a web-UI for humans and a ReSTful API for programmatical use. Users of 
VisualReST - either humans or programs - can get lists of devices, files and users and browse the contents or
search for specific content. The content uploaded to the central
server to make it accessible also when the client is offline.

Users of VisualReST can make queries based on metadata of the content to get a list of content they need. Representation for the list can
be either a view in the web-UI or an atom-feed (which can be easily parsed if necessary in programmatical use).
For example, a user could want a list of all jpg-files related to work from all mobile-devices of his friends.

Shared content can be public to all other users or restricted to certain groups of users only.

The central server of the system consists of a webserver with file storage, a database and an xmpp-server. Client program and the
central server can communicate through http and xmpp. The database holds all the metadata of all shared content.

Description of the high level system structure and the Restful API can be found below.


===High level system structure

http://www.cs.tut.fi/~nota/high_level.png

===RESTful API for the system
http://www.cs.tut.fi/~nota/RESTful_visualREST.png


REST API can be found from:
http://www.cs.tut.fi/~nota/RESTful_visualREST.pdf




 
=Requirements for a VisualRest Client


====Embedded web server #Deprecated
The client should be able to run it's own embedded web server. Currently VisualRest accepts only filelists that are html and formed like the ones generated by the embedded web server.

====Xmpp-connections
Client should be able to communicate with the xmpp-server through port 5222 and handshake itself online. Client has to receive xmpp-messages, but it's not required to be able to send xmpp-messages. 

====Http-connections
Client should be able to send http-requests (get, post, put, delete) to the VisualRest server. VisualRest will try to make http-requests to the client's embedded web server, but xmpp can be used if it's not accessible (behind a firewall etc.).

====Storing credentials
Client should store the id-digest it receives after successful registration of a device. This id-digest is required when client wants to do http-requests to VisualRest that require identification of the device.

====Generating thumbnails
Client should be able to generate thumbnails of it's own files (with f.ex. gd2-library)


==Xmpp-messages sent by VisualRest to the client

 upload <filepath> <commit's hash>
Server asks the client to upload file at <filepath> to the server.
example:
 upload /harald.gif d8f7f710ee58a8590c271f059406293d63112a14


 thumbs <commit's hash>
Server asks the client to upload thumbnail's for the files in given commit <commit's hash>
example:
thumbs 8b10da93353e0e27ef9bdb802f835c92ca423728

 list
Server asks the client to upload it's filelist.

 parse [successful <commit's hash> | error]
Server announces the success or an error in parsing (and updating metadata on the server) a previously uploaded filelist.
example:
parse successful 8b10da93353e0e27ef9bdb802f835c92ca423728


==Xmpp-messages that can be used from client to visualReST instead of HTTP - ReST -messages
You can validate your message with the following dtd:
https://nota.cs.tut.fi:8443/dtd/xmpp2rest_api.dtd


===Creating resources:

# Creating a new user:
:include:../public/Documents/Examples/xmpp2rest_create_user.xml

# Creating a new device for a user:
:include:../public/Documents/Examples/xmpp2rest_create_device.xml

# Creating a new group for a user:
:include:../public/Documents/Examples/xmpp2rest_create_group.xml

# Adding a new member to group:
:include:../public/Documents/Examples/xmpp2rest_create_member2group.xml

# Creating/adding metadata for a device:
:include:../public/Documents/Examples/xmpp2rest_create_files.xml

===Deleting resources:

# Delete member from a group:
:include:../public/Documents/Examples/xmpp2rest_delete_member_from_group.xml

===Updating resources:

# Updates devices online status (puts device online and starts uploading process):
:include:../public/Documents/Examples/xmpp2rest_update_device_online.xml

# Setting access rights to certain groups to certain file:
:include:../public/Documents/Examples/xmpp2rest_update_filerights.xml

# Updates metadata of a file or specific version of a file:
:include:../public/Documents/Examples/xmpp2rest_update_mdata.xml


==Some examples how to use RESTful API from client
Examples can also be found from here: http://www.cs.tut.fi/~nota/REST_examples.txt

:include:REST_examples.txt
